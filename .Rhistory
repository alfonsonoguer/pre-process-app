QvDirect.path <- "Server/data/KPIdb_Qv_Direct.xlsx"
Telephony.path <- "Server/data/KPIdb_Telephony.xlsx"
EList.path <- "Server/data/EmployeeList.xlsx"
QA.path <- "Server/data/IWGD QA results.xlsx"
QA.sheet <- "Raw response sheet"
### Loads and do the main edits on QV data####
QvIndirect <- read_excel(path = QvIndirect.path)
QvDirect <- read_excel(path = QvDirect.path)
Qv <- rbind(QvIndirect,QvDirect)
remove(list = c(
"QvIndirect",
"QvDirect"
))
colnames(Qv) <- str_to_title(colnames(Qv))
Qv <- spaceless(Qv)
my_data2 <-  read_excel("Server/data/IRIS.xlsx")
source("Server/pre_process.R")
my_data<- rename(my_data2)
shinyAppDir("Server/")
Qv
names(my_data)
runApp()
runApp()
# library(tidyverse)
# library(shiny)
# library(readxl)
### Basic functions & main definitions ####
spaceless <- function(x) {colnames(x) <- gsub(" ", "", colnames(x));x}
dotless <- function(x) {colnames(x) <- gsub("\\.", "", colnames(x));x}
dashless <- function(x) {colnames(x) <- gsub("\\-", ".", colnames(x));x}
range01 <- function(x){
(x - min(x, na.rm = T)) / (max(x, na.rm = T) - min(x, na.rm = T))}
ExportFile  <- function(y, data_name=deparse(substitute(y))) {
write_xlsx(
y,
paste0("C:/Users/Alfonso.No
guer/Downloads/",
format(Sys.Date(),"%Y%m%d"),
"_",
gsub(" ","",data_name),
".xlsx")
)
}
# Global parameters
# we only make that numbers with more than 7+ digits use scientific notation.
options(scipen = 7)
color_palette <- c("#D0D3D4","#ff0000","#3498DB","#82E0AA","#E69F00")
# color_palette <- c("#D0D3D4","#557a7b","#000000","#5E8392","#53bbaf")
#l_grey   #red      #Blue     #green    #gold
# benchmark values
# "Active %"
# "AHT"
# "Talk Time Share"
# "Evaluation pass rate"
# "Evaluation avg score"
# "Tour quality"
# "E*:TC - Indirect"
# "TC:D - Indirect"
# "E*:D - Direct"
# "Median SQM sold"
# "ActivePct"
# "AHT"
# "TTshare"
# "QA_PR"
# "QA_Avg"
# "CNSPct"
# "I_Ev_TC"
# "I_TC_D"
# "D_Ev_D"
# "MedSQM"
benchmark_KPI_Agent <- data.frame("Active %"                = 0.5,
"AHT"                     = 0.5,
"Talk Time Share"         = 0.5,
"Evaluation pass rate"    = 0.5,
"Evaluation avg score"    = 0.5,
"Tour quality"            = 0.5,
"E*:TC - Indirect"        = 0.5,
"TC:D - Indirect"         = 0.5,
"E*:D - Direct"           = 0.5,
"Median SQM sold"         = 0.5)
KPI_names <- c("Active %",
"AHT",
"Talk Time Share",
"Evaluation pass rate",
"Evaluation avg score",
"Tour quality",
"E*:TC - Indirect",
"TC:D - Indirect",
"E*:D - Direct",
"Median SQM sold")
### Loads the relevant libraries####
# if (!require("pacman")) install.packages("pacman")
# pacman::p_load(tidyverse,plotly,shiny,shinydashboard,readxl,writexl,
#                DT,lubridate,gtools,reshape2,gdata,ggthemes)
# install.packages("RODBC")
library(tidyverse)
library(plotly)
library(shiny)
library(shinydashboard)
library(readxl)
library(writexl)
library(DT)
library(lubridate)
library(gtools)
library(reshape2)
library(gdata)
library(ggthemes)
# library(readxl)
# library(writexl)
# library(dplyr)
# library(tidyverse)
# library(lubridate)
### Defines dates and key variables and file paths####
CurrentWeek <- floor_date(today(), unit="week")+1
ReportLastWeek <- CurrentWeek - 7
ReportFirstWeek <- ReportLastWeek - 16*7
ReportFirst4WA <- ReportLastWeek - 7*3
ReportFirst8WA <- ReportLastWeek - 7*7
ReportFirst12WA <- ReportLastWeek - 7*11
# setwd("C:/Users/Alfonso.Noguer/OneDrive - IWG plc/
# Shiny Dashboard Alfonso First task/")
QvIndirect.path <- "Server/data/KPIdb_Qv_Indirect.xlsx"
QvDirect.path <- "Server/data/KPIdb_Qv_Direct.xlsx"
Telephony.path <- "Server/data/KPIdb_Telephony.xlsx"
EList.path <- "Server/data/EmployeeList.xlsx"
QA.path <- "Server/data/IWGD QA results.xlsx"
QA.sheet <- "Raw response sheet"
### Loads and do the main edits on QV data####
QvIndirect <- read_excel(path = QvIndirect.path)
QvDirect <- read_excel(path = QvDirect.path)
Qv <- rbind(QvIndirect,QvDirect)
remove(list = c(
"QvIndirect",
"QvDirect"
))
colnames(Qv) <- str_to_title(colnames(Qv))
Qv <- spaceless(Qv)
my_data <- head(Qv, n = 200)
my_data
runApp()
### Defines dates and key variables and file paths####
CurrentWeek <- floor_date(today(), unit="week")+1
ReportLastWeek <- CurrentWeek - 7
ReportFirstWeek <- ReportLastWeek - 16*7
ReportFirst4WA <- ReportLastWeek - 7*3
ReportFirst8WA <- ReportLastWeek - 7*7
ReportFirst12WA <- ReportLastWeek - 7*11
# setwd("C:/Users/Alfonso.Noguer/OneDrive - IWG plc/
# Shiny Dashboard Alfonso First task/")
QvIndirect.path <- "Server/data/KPIdb_Qv_Indirect.xlsx"
QvDirect.path <- "Server/data/KPIdb_Qv_Direct.xlsx"
Telephony.path <- "Server/data/KPIdb_Telephony.xlsx"
EList.path <- "Server/data/EmployeeList.xlsx"
QA.path <- "Server/data/IWGD QA results.xlsx"
QA.sheet <- "Raw response sheet"
### Loads and do the main edits on QV data####
QvIndirect <- read_excel(path = QvIndirect.path)
QvDirect <- read_excel(path = QvDirect.path)
Qv <- rbind(QvIndirect,QvDirect)
remove(list = c(
"QvIndirect",
"QvDirect"
))
colnames(Qv) <- str_to_title(colnames(Qv))
Qv <- spaceless(Qv)
my_data <- head(Qv, n = 200)
shinyAppDir("Server/")
### Defines dates and key variables and file paths####
CurrentWeek <- floor_date(today(), unit="week")+1
ReportLastWeek <- CurrentWeek - 7
ReportFirstWeek <- ReportLastWeek - 16*7
ReportFirst4WA <- ReportLastWeek - 7*3
ReportFirst8WA <- ReportLastWeek - 7*7
ReportFirst12WA <- ReportLastWeek - 7*11
# setwd("C:/Users/Alfonso.Noguer/OneDrive - IWG plc/
# Shiny Dashboard Alfonso First task/")
QvIndirect.path <- "Server/data/KPIdb_Qv_Indirect.xlsx"
QvDirect.path <- "Server/data/KPIdb_Qv_Direct.xlsx"
Telephony.path <- "Server/data/KPIdb_Telephony.xlsx"
EList.path <- "Server/data/EmployeeList.xlsx"
QA.path <- "Server/data/IWGD QA results.xlsx"
QA.sheet <- "Raw response sheet"
### Loads and do the main edits on QV data####
QvIndirect <- read_excel(path = QvIndirect.path)
QvDirect <- read_excel(path = QvDirect.path)
Qv <- rbind(QvIndirect,QvDirect)
remove(list = c(
"QvIndirect",
"QvDirect"
))
colnames(Qv) <- str_to_title(colnames(Qv))
Qv <- spaceless(Qv)
my_data <- head(Qv, n = 200)
shinyAppDir("Server/")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
my_data <- read_excel(path = "Server/data/IRIS.xlsx")
runApp()
runApp()
runApp()
runApp()
source("Server/pre_process.R")
runApp()
my_data <- read_excel(path = "Server/data/IRIS.xlsx")
source("Server/pre_process.R")
rename(my_data)
runApp()
runApp()
runApp()
runApp()
library("writexl")
library("tydiverse")
# write_xlsx(x = iris, path = "Server/data/IRIS.xlsx")
my_data <- read_excel(path = "Server/data/IRIS.xlsx")
source("Server/pre_process.R")
rename(my_data)
shinyAppDir("Server/")
# write_xlsx(x = iris, path = "Server/data/IRIS.xlsx")
my_data <- read_excel(path = "Server/data/IRIS.xlsx")
library("writexl")
library("tydiverse")
# write_xlsx(x = iris, path = "Server/data/IRIS.xlsx")
my_data <- read_excel(path = "Server/data/IRIS.xlsx")
source("Server/pre_process.R")
rename(my_data)
shinyAppDir("Server/")
library("writexl")
library("tydiverse")
# write_xlsx(x = iris, path = "Server/data/IRIS.xlsx")
my_data <- read_excel(path = "Server/data/IRIS.xlsx")
source("Server/pre_process.R")
rename(my_data)
shinyAppDir("Server/")
# write_xlsx(x = iris, path = "Server/data/IRIS.xlsx")
my_data <- read_excel(path = "Server/data/IRIS.xlsx")
source("Server/pre_process.R")
rename(my_data)
shinyAppDir("Server/")
library("writexl")
library("tydiverse")
library("writexl")
library("tidyverse")
# write_xlsx(x = iris, path = "Server/data/IRIS.xlsx")
my_data <- read_excel(path = "Server/data/IRIS.xlsx")
source("Server/pre_process.R")
my_data <- rename(my_data)
shinyAppDir("Server/")
library("writexl")
library("tidyverse")
# write_xlsx(x = iris, path = "Server/data/IRIS.xlsx")
my_data2 <- read_excel(path = "Server/data/IRIS.xlsx")
source("Server/pre_process.R")
my_data <- rename(my_data)
shinyAppDir("Server/")
library("writexl")
library("tidyverse")
# write_xlsx(x = iris, path = "Server/data/IRIS.xlsx")
my_data2 <- read_excel(path = "Server/data/IRIS.xlsx")
source("Server/pre_process.R")
my_data <- rename(my_data2)
shinyAppDir("Server/")
runApp()
library("writexl")
library("tidyverse")
# write_xlsx(x = iris, path = "Server/data/IRIS.xlsx")
my_data2 <- read_excel(path = "IRIS.xlsx")
source("pre_process.R")
my_data <- rename(my_data2)
shinyAppDir()
library("writexl")
library("tidyverse")
# write_xlsx(x = iris, path = "Server/data/IRIS.xlsx")
my_data2 <- read_excel(path = "IRIS.xlsx")
source("pre_process.R")
my_data <- rename(my_data2)
shinyAppDir(appDir = "")
runApp()
library("writexl")
library("tidyverse")
# write_xlsx(x = iris, path = "Server/data/IRIS.xlsx")
my_data2 <- read_excel(path = "app/IRIS.xlsx")
source("app/pre_process.R")
my_data <- rename(my_data2)
shinyAppDir(appDir = "app/")
source('app.R')
library("writexl")
library("tidyverse")
# write_xlsx(x = iris, path = "Server/data/IRIS.xlsx")
my_data2 <- read_excel(path = "app/IRIS.xlsx")
source("app/pre_process.R")
my_data <- rename(my_data2)
source("app/ui.R")
source("app/server.R")
runApp(ui,server)
source("app/server.R")
source('app.R')
# source("app/server.R")
server <- function(input, output, session) {
# Combine the selected variables into a new data frame
selectedData <- reactive({
my_data %>% select(input$xcol, input$ycol)
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
output$plot1 <- renderPlot({
palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
"#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"))
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
}
runApp(ui,server)
runApp(ui,server)
source('app.R')
runApp()
runApp()
library("writexl")
library("tidyverse")
# write_xlsx(x = iris, path = "Server/data/IRIS.xlsx")
my_data2 <- read_excel(path = "app/IRIS.xlsx")
source("app/pre_process.R")
my_data <- rename(my_data2)
source("app/ui.R")
# ui <- pageWithSidebar(
#   headerPanel('my_data k-means clustering'),
#   sidebarPanel(
#     selectInput('xcol', 'X Variable', names(my_data)),
#     selectInput('ycol', 'Y Variable', names(my_data),
#                 selected=names(my_data)[[2]]),
#     numericInput('clusters', 'Cluster count', 3,
#                  min = 1, max = 9)
#   ),
#   mainPanel(
#     plotOutput('plot1')
#   )
# )
source("app/server.R")
# server <- function(input, output, session) {
#
#   # Combine the selected variables into a new data frame
#   selectedData <- reactive({
#     my_data %>% select(input$xcol, input$ycol)
#   })
#
#   clusters <- reactive({
#     kmeans(selectedData(), input$clusters)
#   })
#
#   output$plot1 <- renderPlot({
#     palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
#               "#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"))
#
#     par(mar = c(5.1, 4.1, 0, 1))
#     plot(selectedData(),
#          col = clusters()$cluster,
#          pch = 20, cex = 3)
#     points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
#   })
#
# }
shinyApp(ui = ui, server = server)
library("writexl")
library("tidyverse")
# write_xlsx(x = iris, path = "Server/data/IRIS.xlsx")
my_data2 <- read_excel(path = "app/IRIS.xlsx")
source("app/pre_process.R")
my_data <- rename(my_data2)
source("app/ui.R")
# ui <- pageWithSidebar(
#   headerPanel('my_data k-means clustering'),
#   sidebarPanel(
#     selectInput('xcol', 'X Variable', names(my_data)),
#     selectInput('ycol', 'Y Variable', names(my_data),
#                 selected=names(my_data)[[2]]),
#     numericInput('clusters', 'Cluster count', 3,
#                  min = 1, max = 9)
#   ),
#   mainPanel(
#     plotOutput('plot1')
#   )
# )
source("app/server.R")
# server <- function(input, output, session) {
#
#   # Combine the selected variables into a new data frame
#   selectedData <- reactive({
#     my_data %>% select(input$xcol, input$ycol)
#   })
#
#   clusters <- reactive({
#     kmeans(selectedData(), input$clusters)
#   })
#
#   output$plot1 <- renderPlot({
#     palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
#               "#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"))
#
#     par(mar = c(5.1, 4.1, 0, 1))
#     plot(selectedData(),
#          col = clusters()$cluster,
#          pch = 20, cex = 3)
#     points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
#   })
#
# }
shinyApp(ui = ui, server = server)
runApp()
library("writexl")
library("tidyverse")
# write_xlsx(x = iris, path = "Server/data/IRIS.xlsx")
my_data2 <- read_excel(path = "app/IRIS.xlsx")
source("app/pre_process.R")
my_data <- rename(my_data2)
source("app/ui.R")
# ui <- pageWithSidebar(
#   headerPanel('my_data k-means clustering'),
#   sidebarPanel(
#     selectInput('xcol', 'X Variable', names(my_data)),
#     selectInput('ycol', 'Y Variable', names(my_data),
#                 selected=names(my_data)[[2]]),
#     numericInput('clusters', 'Cluster count', 3,
#                  min = 1, max = 9)
#   ),
#   mainPanel(
#     plotOutput('plot1')
#   )
# )
source("app/server.R")
# server <- function(input, output, session) {
#
#   # Combine the selected variables into a new data frame
#   selectedData <- reactive({
#     my_data %>% select(input$xcol, input$ycol)
#   })
#
#   clusters <- reactive({
#     kmeans(selectedData(), input$clusters)
#   })
#
#   output$plot1 <- renderPlot({
#     palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
#               "#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"))
#
#     par(mar = c(5.1, 4.1, 0, 1))
#     plot(selectedData(),
#          col = clusters()$cluster,
#          pch = 20, cex = 3)
#     points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
#   })
#
# }
shinyApp(ui = ui, server = server)
runApp()
library("writexl")
library("tidyverse")
# write_xlsx(x = iris, path = "Server/data/IRIS.xlsx")
my_data2 <- read_excel(path = "app/IRIS.xlsx")
source("app/pre_process.R")
my_data <- rename(my_data2)
source("app/ui.R")
# ui <- pageWithSidebar(
#   headerPanel('my_data k-means clustering'),
#   sidebarPanel(
#     selectInput('xcol', 'X Variable', names(my_data)),
#     selectInput('ycol', 'Y Variable', names(my_data),
#                 selected=names(my_data)[[2]]),
#     numericInput('clusters', 'Cluster count', 3,
#                  min = 1, max = 9)
#   ),
#   mainPanel(
#     plotOutput('plot1')
#   )
# )
user_interface <- ui
source("app/server.R")
# server <- function(input, output, session) {
#
#   # Combine the selected variables into a new data frame
#   selectedData <- reactive({
#     my_data %>% select(input$xcol, input$ycol)
#   })
#
#   clusters <- reactive({
#     kmeans(selectedData(), input$clusters)
#   })
#
#   output$plot1 <- renderPlot({
#     palette(c("#E41A1C", "#377EB8", "#4DAF4A", "#984EA3",
#               "#FF7F00", "#FFFF33", "#A65628", "#F781BF", "#999999"))
#
#     par(mar = c(5.1, 4.1, 0, 1))
#     plot(selectedData(),
#          col = clusters()$cluster,
#          pch = 20, cex = 3)
#     points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
#   })
#
# }
servidor <- server
shinyApp(ui = user_interface, server = servidor)
write_xlsx(x = iris, path = "Server/data/IRIS2.xlsx")
write_xlsx(x = iris, path = "app/IRIS2.xlsx")
